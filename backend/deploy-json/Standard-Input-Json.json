{
    "language": "Solidity",
    "sources": {
        "@openzeppelin/contracts/access/AccessControl.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
        },
        "@openzeppelin/contracts/access/IAccessControl.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
        },
        "@openzeppelin/contracts/utils/Context.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
        },
        "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
        },
        "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
        },
        "@openzeppelin/contracts/utils/math/Math.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
        },
        "@openzeppelin/contracts/utils/Strings.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
        },
        "contracts/Certifications.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"./utils/Maths.sol\";\nimport \"./utils/MultiSigWithRole.sol\";\nimport \"./Students.sol\";\nimport \"./utils/AddressToString.sol\";\n\ncontract Certifications is AccessControl, MultiSigWithRole, Maths, Students, AddressToString {\n    \n    using Strings for uint256;\n\n    event multiSigSigned(bytes32 multiSigName);\n    event multiSigCleared(bytes32 multiSigName);\n    event certificationEmited(uint studentId, appreciation appreciation, degree degree, program program);\n\n    struct Role {\n        uint32 nb;\n        uint32 MIN;\n        uint32 MAX;\n        uint8 PERCENT_TO_GRANT;\n        uint8 PERCENT_TO_REVOKE;\n        bytes32 ADMIN;\n        bytes32 name;\n    }\n\n    enum appreciation {\n        A,\n        B,\n        C,\n        D\n    }\n\n    enum degree {\n        BACHELOR,\n        MASTER,\n        PHD\n    }\n\n    enum program {\n        COMPUTER_SCIENCE,\n        MATHEMATICS,\n        PHYSICS,\n        CHEMISTRY,\n        BIOLOGY,\n        ECONOMICS,\n        LAW,\n        MEDICINE,\n        PHILOSOPHY,\n        LITERATURE,\n        HISTORY,\n        GEOGRAPHY,\n        ARTS,\n        MUSIC,\n        SPORTS,\n        OTHER\n    }\n\n\n    struct Certificate {\n        appreciation appreciation;\n        degree degree;\n        program program;\n        uint creation_date;\n        bool validity;\n\n        // STUDENT INFO\n        uint stud_id;\n    }\n\n    bytes32 public constant CERTIFIER = keccak256(\"CERTIFIER\");\n    bytes32 public constant CERTIFIER_ADMIN = keccak256(\"CERTIFIER_ADMIN\");\n\n\n    uint8 public constant MAX_CERTIFIERS = 15;\n\n    uint8 public constant MIN_CERTIFIERS_ADMIN = 2;\n    uint8 public constant MAX_CERTIFIERS_ADMIN = 15;\n\n    uint8 public constant PERCENT_TO_GRANT_CERTIFIER_ADMIN = 80;\n    uint8 public constant PERCENT_TO_REVOKE_CERTIFIER_ADMIN = 80;\n\n    uint8 public constant PERCENT_TO_GRANT_CERTIFIER = 80;\n    uint8 public constant PERCENT_TO_REVOKE_CERTIFIER = 80;\n\n    uint8 public constant PERCENT_TO_CERTIFY = 51;\n    uint8 public constant PERCENT_TO_EDIT_CERTIFICATE = 80;\n\n    uint8 public constant PERCENT_TO_DELETE_STUDENT = 80;\n\n    \n    mapping (bytes32 => Role) internal roles;\n\n    mapping (bytes32 => MultiSigRole) public multiSig;\n\n    mapping (uint => bytes32) public multiSigId;\n\n    uint multiSigIdCount;\n\n    mapping (bytes32 => Certificate) public certificates;\n\n    mapping (uint => bytes32[]) public certificatesByStudent;\n\n\n    constructor(address certifier_admin1, address certifier_admin2) {\n        require(certifier_admin1 != address(0), \"Certifier admin1 address cannot be 0\");\n        require(certifier_admin2 != address(0), \"Certifier admin2 address cannot be 0\");\n        require(certifier_admin1 != certifier_admin2, \"Certifier addresses cannot be the same\");\n\n        _setupRole(CERTIFIER_ADMIN, certifier_admin1);\n        _grantRole(CERTIFIER_ADMIN, certifier_admin2);\n        roles[CERTIFIER_ADMIN] = Role(\n            2, \n            MIN_CERTIFIERS_ADMIN, \n            MAX_CERTIFIERS_ADMIN, \n            PERCENT_TO_GRANT_CERTIFIER_ADMIN,\n            PERCENT_TO_REVOKE_CERTIFIER_ADMIN,\n            CERTIFIER_ADMIN,\n            bytes32(abi.encodePacked(\"CERTIFIER_ADMIN\"))\n        );\n\n        _setupRole(CERTIFIER, address(0));\n        roles[CERTIFIER] = Role(\n            0,\n            0,\n            MAX_CERTIFIERS,\n            PERCENT_TO_GRANT_CERTIFIER,\n            PERCENT_TO_REVOKE_CERTIFIER,\n            CERTIFIER_ADMIN,\n            bytes32(abi.encodePacked(\"CERTIFIER\"))\n        );\n    }\n\n    function multiSigIdentifier(bytes32 multiSigName, bytes32 role, string memory info) internal {\n        if (multiSig[multiSigName].created == false) {\n            multiSig[multiSigName].created = true;\n            multiSigId[multiSigIdCount] = multiSigName;\n            multiSigIdCount += 1;\n            multiSig[multiSigName].role = role;\n            multiSig[multiSigName].info = info;\n        }\n    }\n\n    function grantAnyRole(bytes32 roleHash, address target, bool approve) external {\n        Role storage role = roles[roleHash];\n        require(role.MAX > role.nb, string.concat(\"Max \", string(abi.encodePacked(role.name)), \" reached\"));\n        require(hasRole(role.ADMIN, msg.sender), string.concat(\"Caller is not a \", string(abi.encodePacked(role.name)), \" admin\"));\n        require(hasRole(roleHash, target) == false, string.concat(\"This address is already a \", string(abi.encodePacked(role.name))));\n\n        bytes32 multiSigName = keccak256(abi.encodePacked(target, \"GRANT\", roleHash));\n        multiSigIdentifier(multiSigName, role.ADMIN, string.concat(\"Grant \", string(abi.encodePacked(role.name)), \" \", addToStr(target)));\n\n        if (approve && multiSig[multiSigName].approved[msg.sender] == false) {\n            multiSigRoleSign(multiSig[multiSigName], msg.sender);\n            emit multiSigSigned(multiSigName);\n        } else if (approve == false) {\n            multiSigRoleUnsign(multiSig[multiSigName], msg.sender);\n            emit multiSigSigned(multiSigName);\n        }\n\n        if (multiSig[multiSigName].count >= (ceilUDiv(roles[role.ADMIN].nb * role.PERCENT_TO_GRANT, 100))) {\n            clearMultiSigRole(multiSig[multiSigName]);\n            emit multiSigCleared(multiSigName);\n            _grantRole(roleHash, target);\n            role.nb += 1;\n        }\n    }\n\n    function revokeAnyRole(bytes32 roleHash, address target, bool approve) external {\n        Role storage role = roles[roleHash];\n        require(role.nb > role.MIN, string.concat(\"Min \", string(abi.encodePacked(role.name)), \" reached\"));\n        require(hasRole(roleHash, target), string.concat(\"This address is not a \", string(abi.encodePacked(role.name))));\n        require(hasRole(role.ADMIN, msg.sender), string.concat(\"Caller is not a \", string(abi.encodePacked(role.name)), \" admin\"));\n\n        bytes32 multiSigName = keccak256(abi.encodePacked(target, \"REVOKE\", roleHash));\n        multiSigIdentifier(multiSigName, role.ADMIN, string.concat(\"Revoke \", string(abi.encodePacked(role.name)), \" \", addToStr(target)));\n\n        if (approve && multiSig[multiSigName].approved[msg.sender] == false) {\n            multiSigRoleSign(multiSig[multiSigName], msg.sender);\n            emit multiSigSigned(multiSigName);\n        } else if (approve == false) {\n            multiSigRoleUnsign(multiSig[multiSigName], msg.sender);\n            emit multiSigSigned(multiSigName);\n        }\n\n        if ((roleHash != role.ADMIN && multiSig[multiSigName].count >= (ceilUDiv(roles[role.ADMIN].nb * role.PERCENT_TO_REVOKE, 100))) ||\n            (roleHash == role.ADMIN && multiSig[multiSigName].count >= (ceilUDiv((roles[role.ADMIN].nb - 1) * role.PERCENT_TO_REVOKE, 100))))\n        {\n\n            for (uint i = 0; i < multiSigIdCount; i++) {\n                if (multiSig[multiSigId[i]].approved[target] == true && multiSig[multiSigId[i]].role == roleHash) {\n                    multiSig[multiSigId[i]].count -= 1;\n                    multiSig[multiSigId[i]].approved[target] = false;\n                }\n            }\n            \n            clearMultiSigRole(multiSig[multiSigName]);\n            emit multiSigCleared(multiSigName);\n            _revokeRole(roleHash, target);\n            role.nb -= 1;\n        }\n    }\n\n    function createStudent(uint _id, string memory _firstname, string memory _lastname, uint _birthdate) external {\n        require(hasRole(CERTIFIER, msg.sender), \"Caller is not a certifier\");\n        require(_id > 0, \"Id must be greater than 0\");\n        require(bytes(_firstname).length > 0, \"Firstname cannot be empty\");\n        require(bytes(_lastname).length > 0, \"Lastname cannot be empty\");\n        require(_birthdate > 0, \"Birthdate must be greater than 0\");\n        require(students[_id].id == 0, \"This student already exists\");\n\n        addStudent(_id, _firstname, _lastname, _birthdate);\n    }\n\n    function removeStudentById(uint _id, bool _approve) external {\n        require(hasRole(CERTIFIER, msg.sender), \"Caller is not a certifier\");\n        require(_id > 0, \"Id must be greater than 0\");\n        require(students[_id].id != 0, \"This student doesn't exist\");\n\n        bytes32 multiSigName = keccak256(abi.encodePacked(_id, \"DELETE STUDENT\"));\n        multiSigIdentifier(multiSigName, CERTIFIER, string.concat(\"Delete student \", Strings.toString(_id)));\n\n        if (_approve && multiSig[multiSigName].approved[msg.sender] == false) {\n            multiSigRoleSign(multiSig[multiSigName], msg.sender);\n            emit multiSigSigned(multiSigName);\n        } else if (_approve == false) {\n            multiSigRoleUnsign(multiSig[multiSigName], msg.sender);\n            emit multiSigSigned(multiSigName);\n        }\n\n        if (multiSig[multiSigName].count >= (ceilUDiv(roles[CERTIFIER].nb * PERCENT_TO_DELETE_STUDENT, 100))) {\n            clearMultiSigRole(multiSig[multiSigName]);\n            emit multiSigCleared(multiSigName);\n            deleteStudent(_id);\n        }\n    }\n\n    function editStudentById(uint _id, string memory _firstname, string memory _lastname , uint256 _birthdate) external {\n        require(hasRole(CERTIFIER, msg.sender), \"Caller is not a certifier\");\n        require(_id > 0, \"Id must be greater than 0\");\n        require(students[_id].id != 0, \"This student doesn't exist\");\n\n        editStudent(_id, _firstname, _lastname, _birthdate);\n    }\n\n    function createCertificate(uint studentId, appreciation app, degree deg, program prog) internal {\n        certificates[keccak256(abi.encodePacked(studentId, app, deg, prog))] = Certificate(\n            app,\n            deg,\n            prog,\n            block.timestamp,\n            true,\n            studentId\n        );\n        certificatesByStudent[studentId].push(keccak256(abi.encodePacked(studentId, app, deg, prog)));\n        emit certificationEmited(studentId, app, deg, prog);\n    }\n\n    function certify(uint studentId, appreciation app, degree deg, program prog, bool approve) external {\n        require(hasRole(CERTIFIER, msg.sender), \"Caller is not a certifier\");\n        require(students[studentId].id != 0, \"This student doesn't exist\");\n        require(app >= appreciation.A && app <= appreciation.D, \"Appreciation is not valid\");\n        require(deg >= degree.BACHELOR && deg <= degree.PHD, \"Degree is not valid\");\n        require(prog >= program.COMPUTER_SCIENCE && prog <= program.OTHER, \"Program is not valid\");\n        require(certificates[keccak256(abi.encodePacked(studentId, app, deg, prog))].validity == false, \"This certificate already exists\");\n\n        bytes32 multiSigName = keccak256(abi.encodePacked(studentId, app, deg, prog, \"CERTIFY\"));\n        multiSigIdentifier(multiSigName, CERTIFIER, string.concat(\"Certify \", Strings.toString(studentId), \" \",  Strings.toString(uint256(app)), \" \", Strings.toString(uint256(deg)), \" \", Strings.toString(uint256(prog))));\n\n        if (approve && multiSig[multiSigName].approved[msg.sender] == false) {\n            multiSigRoleSign(multiSig[multiSigName], msg.sender);\n            emit multiSigSigned(multiSigName);\n        } else if (approve == false) {\n            multiSigRoleUnsign(multiSig[multiSigName], msg.sender);\n            emit multiSigSigned(multiSigName);\n        }\n\n        if (multiSig[multiSigName].count >= (ceilUDiv(roles[CERTIFIER].nb * PERCENT_TO_CERTIFY, 100))) {\n            clearMultiSigRole(multiSig[multiSigName]);\n            emit multiSigCleared(multiSigName);\n            createCertificate(studentId, app, deg, prog);\n        }\n    }\n\n    function deleteCertificate(uint studentId, appreciation app, degree deg, program prog, bool approve) external {\n        require(hasRole(CERTIFIER, msg.sender), \"Caller is not a certifier\");\n        require(students[studentId].id != 0, \"This student doesn't exist\");\n        require(app >= appreciation.A && app <= appreciation.D, \"Appreciation is not valid\");\n        require(deg >= degree.BACHELOR && deg <= degree.PHD, \"Degree is not valid\");\n        require(prog >= program.COMPUTER_SCIENCE && prog <= program.OTHER, \"Program is not valid\");\n        require(certificates[keccak256(abi.encodePacked(studentId, app, deg, prog))].validity == true, \"This certificate doesn't exist\");\n\n        bytes32 multiSigName = keccak256(abi.encodePacked(studentId, app, deg, prog, \"DELETE\"));\n        multiSigIdentifier(multiSigName, CERTIFIER, string.concat(\"Delete \", Strings.toString(studentId), \" \", Strings.toString(uint256(app)), \" \", Strings.toString(uint256(deg)), \" \", Strings.toString(uint256(prog))));\n\n        if (approve && multiSig[multiSigName].approved[msg.sender] == false) {\n            multiSigRoleSign(multiSig[multiSigName], msg.sender);\n            emit multiSigSigned(multiSigName);\n        } else if (approve == false) {\n            multiSigRoleUnsign(multiSig[multiSigName], msg.sender);\n            emit multiSigSigned(multiSigName);\n        }\n\n        if (multiSig[multiSigName].count >= (ceilUDiv(roles[CERTIFIER].nb * PERCENT_TO_EDIT_CERTIFICATE, 100))) {\n            clearMultiSigRole(multiSig[multiSigName]);\n            emit multiSigCleared(multiSigName);\n            certificates[keccak256(abi.encodePacked(studentId, app, deg, prog))].validity = false;\n        }\n    }\n\n    function getCertificatesByStudent(uint _id) public view returns (bytes32[] memory) {\n        require(students[_id].id != 0, \"This student doesn't exist\");\n        return certificatesByStudent[_id];\n    }\n\n    function getCertificationById(bytes32 _id) public view returns(uint8, uint8, uint8, uint, uint) {\n        require(certificates[_id].validity == true, \"This certificate doesn't exist\");\n        return(uint8(certificates[_id].appreciation), uint8(certificates[_id].degree), uint8(certificates[_id].program), certificates[_id].creation_date, certificates[_id].stud_id);\n    }\n\n    function getAllMultiSig(address signer) public view returns (bytes32[] memory, uint8[] memory,  string[] memory, bool[] memory) {\n        string[] memory multiSigsInfo = new string[](multiSigIdCount);\n        uint8[] memory multiSigsCount = new uint8[](multiSigIdCount);\n        bytes32[] memory multiSigsRole = new bytes32[](multiSigIdCount);\n        bool[] memory multiSigsSigned = new bool[](multiSigIdCount);\n        for (uint i = 0; i < multiSigIdCount; i++) {\n            multiSigsInfo[i] = multiSig[multiSigId[i]].info;\n            multiSigsCount[i] = multiSig[multiSigId[i]].count;\n            multiSigsRole[i] = multiSig[multiSigId[i]].role;\n            multiSigsSigned[i] = multiSig[multiSigId[i]].approved[signer];\n        }\n        return (multiSigsRole, multiSigsCount, multiSigsInfo, multiSigsSigned);\n    }\n\n    function getRoleMembersNb(bytes32 _role) public view returns (uint) {\n        return roles[_role].nb;\n    }\n\n    function renounceRole(bytes32, address) public virtual override {\n        revert(\"You can't renounce to your role. Please contact admins\");\n    }\n}"
        },
        "contracts/Students.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\ncontract Students {\n\n    event StudentAdded(uint256 id, string firstname, string lastname, uint256 birthdate);\n    event StudentDeleted(uint256 id);\n    event StudentEdited(uint256 id, string firstname, string lastname, uint256 birthdate);\n\n    struct Student {\n        uint256 id;\n        string firstname;\n        string lastname;\n        uint256 birthdate;\n    }\n\n    mapping (uint => Student) public students;\n\n    uint[] public studentsIds;\n\n    function addStudent(uint _id, string memory _firstname, string memory _lastname , uint256 _birthdate) internal {\n        require(students[_id].id == 0, \"Student already exists\");\n        require(_id != 0, \"Id can't be 0\");\n\n        students[_id] = Student(_id, _firstname, _lastname, _birthdate);\n        studentsIds.push(_id);\n\n        emit StudentAdded(_id, _firstname, _lastname, _birthdate);\n    }\n\n    function getStudent(uint256 _id) public view returns (string memory, string memory, uint256) {\n        require(students[_id].id != 0, \"Student doesn't exist\");\n        return (students[_id].firstname, students[_id].lastname, students[_id].birthdate);\n    }\n\n    function getStudentsIds() public view returns (uint[] memory) {\n        return studentsIds;\n    }\n\n    function deleteStudent(uint256 _id) internal {\n        delete students[_id];\n        for (uint i = 0; i < studentsIds.length; i++) {\n            if (studentsIds[i] == _id) {\n                studentsIds[i] = 0;\n                break;\n            }\n        }\n        emit StudentDeleted(_id);\n    }\n\n    function editStudent(uint256 _id, string memory _firstname, string memory _lastname , uint256 _birthdate) internal {\n        require(students[_id].id != 0, \"Student does not exist\");\n        if (keccak256(abi.encodePacked(_firstname)) != keccak256(abi.encodePacked(students[_id].firstname)) && keccak256(abi.encodePacked(_firstname)) != keccak256(abi.encodePacked(\"\"))) {\n            students[_id].firstname = _firstname;\n        }\n        if (keccak256(abi.encodePacked(_lastname)) != keccak256(abi.encodePacked(students[_id].lastname)) && keccak256(abi.encodePacked(_lastname)) != keccak256(abi.encodePacked(\"\"))) {\n            students[_id].lastname = _lastname;\n        }\n        if (_birthdate != students[_id].birthdate && _birthdate != 0) {\n            students[_id].birthdate = _birthdate;\n        }\n        emit StudentEdited(_id, _firstname, _lastname, _birthdate);\n    }\n\n}"
        },
        "contracts/utils/AddressToString.sol": {
            "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.19;\n\ncontract AddressToString {\n    /**\n     * @dev Converts an address to a string.\n     * @param _address Address to convert.\n     * @return string representation of the address.\n     */\n    function addToStr(address _address) public pure returns (string memory) {\n        bytes32 value = bytes32(uint256(uint160(_address)));\n        bytes memory alphabet = \"0123456789abcdef\";\n\n        bytes memory str = new bytes(42);\n        str[0] = '0';\n        str[1] = 'x';\n\n        for (uint256 i = 0; i < 20; i++) {\n            str[2 + i * 2] = alphabet[uint8(value[i + 12] >> 4)];\n            str[3 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\n        }\n\n        return string(str);\n    }\n}"
        },
        "contracts/utils/Maths.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\ncontract Maths {\n    function ceilUDiv(uint a, uint b) public pure returns(uint) {\n        if (a % b == 0) {\n            return (a / b);\n        } else {\n            return ((a / b) + 1);\n        }\n    }\n}"
        },
        "contracts/utils/MultiSigWithRole.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\ncontract MultiSigWithRole {\n\n    struct MultiSigRole {\n        bool created; // is the multisig created\n        bytes32 role; // role requiered to sign\n        uint8 count; // number of signers\n        uint8 id; // ids to retrieve signers\n        mapping (address => bool) approved; // signers approved\n        mapping (uint => address) address_id; // signers list\n        string info; // info about the multisig\n    }\n\n    function multiSigRoleSign(MultiSigRole storage multiSig, address sender) internal {\n        require(multiSig.approved[sender] == false, \"You already signed this multisig\");\n        multiSig.address_id[multiSig.id] = sender;\n        multiSig.id++;\n        multiSig.approved[sender] = true;\n        multiSig.count += 1;\n    }\n\n    function multiSigRoleUnsign(MultiSigRole storage multiSig, address sender) internal {\n        require(multiSig.approved[sender] == true, \"You have note signed this multisig yet\");\n        multiSig.approved[sender] = false;\n        multiSig.count -= 1;\n    }\n\n    function clearMultiSigRole(MultiSigRole storage multiSig) internal {\n        multiSig.count = 0;\n        for (uint8 i = 0; i < multiSig.id; i++) {\n            multiSig.approved[multiSig.address_id[i]] = false;\n        }\n    }\n}"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers",
                    "metadata"
                ],
                "": [
                    "ast"
                ]
            }
        }
    }
}